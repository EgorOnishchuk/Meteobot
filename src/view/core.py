from abc import ABC, abstractmethod
from collections.abc import Callable, Iterable, Iterator
from typing import Any

from aiogram.types import Message
from aiogram.utils.formatting import Bold, Italic, Text, as_list

from src.presenter.schemas import (
    HistoryRecord,
    PydanticHistoryRecord,
    PydanticWeather,
    Weather,
)


def answer_one(
    func: Callable[["View", Message, Any], Text],
) -> Callable[["View", Message, Any], Text]:
    async def wrapper(self, message: Message, *args: Any, **kwargs: Any) -> None:
        content = func(self, message, *args, **kwargs)
        await message.answer(**content.as_kwargs())

    return wrapper


def answer_many(
    func: Callable[["View", Message, Any], Iterable[Text]],
) -> Callable[["View", Message, Any], Iterable[Text]]:
    async def wrapper(self, message: Message, *args: Any, **kwargs: Any) -> None:
        content = func(self, message, *args, **kwargs)

        for portion in content:
            await message.answer(**portion.as_kwargs())

    return wrapper


class View(ABC):
    @abstractmethod
    def greet_new(self, message: Message) -> Any:
        pass

    @abstractmethod
    def greet_existent(self, message: Message) -> Any:
        pass

    @abstractmethod
    def help(self, message: Message) -> Any:
        pass

    @abstractmethod
    def ask_locality(self, message: Message) -> Any:
        pass

    @abstractmethod
    def show_weather(self, message: Message, weather: list[Weather]) -> Any:
        pass

    @abstractmethod
    def show_history(self, message: Message, history: list[HistoryRecord]) -> Any:
        pass

    @abstractmethod
    def tell_invalid_input(self, message: Message) -> Any:
        pass

    @abstractmethod
    def tell_general_error(self, message: Message) -> Any:
        pass

    @abstractmethod
    def tell_unknown(self, message: Message) -> Any:
        pass


class FormattedView(View):
    @staticmethod
    def _greet(message: Message, additional: tuple[str | Text]) -> Text:
        return Text("–ü—Ä–∏–≤–µ—Ç, ", Bold(message.from_user.first_name), "! ", *additional)

    @answer_one
    def greet_new(self, message: Message) -> Text:
        return self._greet(
            message,
            (
                "–†–∞–¥ —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —Ç–æ–º, —á—Ç–æ —è —É–º–µ—é, –≤–≤–µ–¥–∏ ",
                Italic("/help"),
                ".",
            ),
        )

    @answer_one
    def greet_existent(self, message: Message) -> Text:
        return self._greet(message, ("–†–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!",))

    @answer_one
    def help(self, message: Message) -> Text:
        return as_list(
            "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é.",
            *[
                f"{marker} {command} ‚Äî {description}."
                for marker, command, description in (
                    ("üëã", "/start", "–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–µ –∏ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ"),
                    ("‚ùì", "/help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ (—ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)"),
                    (
                        "‚òÄÔ∏è",
                        "/weather",
                        "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö "
                        "–º–µ—Ç–µ–æ—Å–ª—É–∂–±",
                    ),
                    ("üìÉ", "/history", "–í—ã–≤–µ—Å—Ç–∏ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–≥–æ–¥–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"),
                )
            ],
        )

    @answer_one
    def ask_locality(self, message: Message) -> Text:
        return Text(
            "–í–≤–µ–¥–∏ ",
            Bold("–Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –†–æ—Å—Å–∏–∏"),
            ", –ø–æ–≥–æ–¥—É –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å.",
        )

    @staticmethod
    def _render_list(pairs: dict[str, Any]) -> Text:
        return as_list(*(f"{param}: {value}" for param, value in pairs.items()))

    @answer_many
    def show_weather(
        self, message: Message, comparison: list[PydanticWeather]
    ) -> Iterator[Text]:
        return (
            self._render_list(weather.to_dict(by_alias=True, exclude_none=True))
            for weather in comparison
        )

    @answer_many
    def show_history(
        self, message: Message, history: list[PydanticHistoryRecord]
    ) -> Iterator[Text]:
        if not history:
            return iter(
                (
                    Text(
                        "–¢—ã –µ—â—ë –Ω–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–ª –ø–æ–≥–æ–¥—É. –°–∞–º–æ–µ –≤—Ä–µ–º—è —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å ‚Äî –≤–≤–µ–¥–∏ ",
                        Italic("/weather"),
                        "!",
                    ),
                )
            )
        return (
            Text(
                Bold(record.locality),
                ", ",
                Italic(record.timestamp.strftime("%d.%m.%Y %H:%M")),
                "\n",
                as_list(
                    *(self._render_list(weather) for weather in record.weather),
                    sep="\n" * 2,
                ),
            )
            for record in history
        )

    @answer_one
    def tell_invalid_input(self, message: Message) -> Text:
        return Text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤–≤–æ–¥–∏—à—å –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
        )

    @answer_one
    def tell_general_error(self, message: Message) -> Text:
        return Text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        )

    @answer_one
    def tell_unknown(self, message: Message) -> Text:
        return Text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é, –≤–≤–µ–¥–∏ ",
            Italic("/help"),
            ".",
        )
